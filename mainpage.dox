/*!\mainpage Introduction to Terminology and Code
*
* \section intro_sec Introduction
*
* This is the introduction.
*
* \section terminology Terminology used in STS
*
* \subsection smc_terminology SMC terminology
*
* \par X-forest
* A collection of trees on taxa X such that the (disjoint) union of the leaf labels is X.
*
* \par partial state
* A partial state is a partially specified state; in the phylogenetic context it is an X-forest.
*
* \par state
* According to BSJ, "state" is an abbreviation for fully specified state.
* However, for us we are calling a partial state a state.
*
* \par particle
* According to BSJ, a particle is an element of the list of partial states.
* A given partial state can be found in a number of particles.
* Partial states are called particles before and after resampling.
* In SMCTC, a particle has a weight and a (partial) state; we might as well just take this to be part of the definition.
*
* \par generation
* SMCTC generation = BSJ iteration.
* Generation/iteration numbers increase from 1.
*
* \par duality
* A partial state is dual to a collection of total states by considering the total states (trees) that contain that given partial state.
* The other way is by finding the forest in common with a collection of trees.
*
*
* \subsection sts_terminology STS terminology in the code
*
* \par edge
* An edge is a combination of a node and a distance.
*
* \par \c phylo_particle
* A partial state in the Poset SMC framework.
* Has a \c phylo_node and a predecessor \c phylo_particle.
*
* \par \c phylo_node
* A node is either an edge and a leaf (a pendant edge) or an edge and the merge of two edges (an internal node).
* It also has an associated \c online_calculator.
*
* \par \c particle
* A particle as described in the previous section, implemented as a \c shared_ptr to a \c phylo_particle.
*
* \par \c perp, aka \f$\perp\f$
* The initial partial state.
*
*
* \subsection code_organization Code organization
*
* Most everything except for the main executable is found in the include directory.
*
* \par _fwd
* Forward declarations-- which are like function prototypes.
* Also includes class edclarations.
* Meant to be included.
*
*/


/* vim: set ft=cpp: */
